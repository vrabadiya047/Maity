{"ast":null,"code":"var _jsxFileName = \"D:\\\\wedding\\\\Maity_task\\\\src\\\\components\\\\charts\\\\ShapeClassMassBar.tsx\";\n// components/charts/ShapeClassMassBar.tsx\nimport React from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Tooltip, Legend } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Tooltip, Legend);\nconst ShapeClassMassBar = ({\n  data\n}) => {\n  const groupMap = {};\n  data.forEach(({\n    shape,\n    objectClass,\n    mass\n  }) => {\n    const key = `${shape}__${objectClass}`;\n    if (!groupMap[key]) {\n      groupMap[key] = {\n        total: mass,\n        count: 1\n      };\n    } else {\n      groupMap[key].total += mass;\n      groupMap[key].count++;\n    }\n  });\n  const shapes = [...new Set(data.map(d => d.shape))];\n  const classes = [...new Set(data.map(d => d.objectClass))];\n  const datasets = classes.map((cls, i) => {\n    return {\n      label: cls,\n      data: shapes.map(shape => {\n        const key = `${shape}__${cls}`;\n        const group = groupMap[key];\n        return group ? group.total / group.count : 0;\n      }),\n      backgroundColor: `hsl(${i * 60}, 70%, 60%)`\n    };\n  });\n  const chartData = {\n    labels: shapes,\n    datasets\n  };\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        labels: {\n          color: 'white'\n        }\n      }\n    },\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: 'Shape',\n          color: 'white'\n        },\n        ticks: {\n          color: 'white'\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'Avg Mass (kg)',\n          color: 'white'\n        },\n        ticks: {\n          color: 'white'\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"chart-title\",\n      children: \"Avg Mass by Shape & Object Class\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Bar, {\n      data: chartData,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_c = ShapeClassMassBar;\nexport default ShapeClassMassBar;\nvar _c;\n$RefreshReg$(_c, \"ShapeClassMassBar\");","map":{"version":3,"names":["React","Bar","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Tooltip","Legend","jsxDEV","_jsxDEV","register","ShapeClassMassBar","data","groupMap","forEach","shape","objectClass","mass","key","total","count","shapes","Set","map","d","classes","datasets","cls","i","label","group","backgroundColor","chartData","labels","options","responsive","plugins","legend","color","scales","x","title","display","text","ticks","y","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/wedding/Maity_task/src/components/charts/ShapeClassMassBar.tsx"],"sourcesContent":["// components/charts/ShapeClassMassBar.tsx\r\nimport React from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Tooltip,\r\n  Legend\r\n} from 'chart.js';\r\n\r\nChartJS.register(CategoryScale, LinearScale, BarElement, Tooltip, Legend);\r\n\r\ninterface Props {\r\n  data: {\r\n    shape: string;\r\n    objectClass: string;\r\n    mass: number;\r\n  }[];\r\n}\r\n\r\nconst ShapeClassMassBar: React.FC<Props> = ({ data }) => {\r\n  const groupMap: Record<string, { total: number; count: number }> = {};\r\n\r\n  data.forEach(({ shape, objectClass, mass }) => {\r\n    const key = `${shape}__${objectClass}`;\r\n    if (!groupMap[key]) {\r\n      groupMap[key] = { total: mass, count: 1 };\r\n    } else {\r\n      groupMap[key].total += mass;\r\n      groupMap[key].count++;\r\n    }\r\n  });\r\n\r\n  const shapes = [...new Set(data.map(d => d.shape))];\r\n  const classes = [...new Set(data.map(d => d.objectClass))];\r\n\r\n  const datasets = classes.map((cls, i) => {\r\n    return {\r\n      label: cls,\r\n      data: shapes.map(shape => {\r\n        const key = `${shape}__${cls}`;\r\n        const group = groupMap[key];\r\n        return group ? group.total / group.count : 0;\r\n      }),\r\n      backgroundColor: `hsl(${i * 60}, 70%, 60%)`,\r\n    };\r\n  });\r\n\r\n  const chartData = {\r\n    labels: shapes,\r\n    datasets\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        labels: { color: 'white' }\r\n      },\r\n    },\r\n    scales: {\r\n      x: {\r\n        title: { display: true, text: 'Shape', color: 'white' },\r\n        ticks: { color: 'white' }\r\n      },\r\n      y: {\r\n        title: { display: true, text: 'Avg Mass (kg)', color: 'white' },\r\n        ticks: { color: 'white' }\r\n      }\r\n    }\r\n  };\r\n\r\n \r\n  return (\r\n    <div className=\"chart-section\">\r\n      <h2 className=\"chart-title\">Avg Mass by Shape & Object Class</h2>\r\n      <Bar data={chartData} options={options} />\r\n    </div>\r\n  );\r\n  \r\n};\r\n\r\nexport default ShapeClassMassBar;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}